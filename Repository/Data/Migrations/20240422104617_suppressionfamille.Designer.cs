// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240422104617_suppressionfamille")]
    partial class suppressionfamille
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BudgetFinancement", b =>
                {
                    b.Property<int>("BudgetFinancementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetFinancementID"));

                    b.Property<DateTime>("DateBudget")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmetteurBudget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MontantBudget")
                        .HasColumnType("float");

                    b.Property<string>("NuméroCheque")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BudgetFinancementID");

                    b.ToTable("BudgetFinancement");
                });

            modelBuilder.Entity("Domain.Entities.BudgetFonctionnement", b =>
                {
                    b.Property<int>("BudgetFonctionnementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetFonctionnementID"));

                    b.Property<DateTime>("DateBudget")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmetteurBudget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MontantBudget")
                        .HasColumnType("float");

                    b.Property<string>("NuméroCheque")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BudgetFonctionnementID");

                    b.ToTable("BudgetFonctionnement");
                });

            modelBuilder.Entity("Domain.Entities.Chapitre", b =>
                {
                    b.Property<int>("ChapitreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapitreID"));

                    b.Property<string>("ChapitreTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<double>("MontantTotale")
                        .HasColumnType("float");

                    b.HasKey("ChapitreID");

                    b.ToTable("Chapitres");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int?>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ClientID"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAderation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecouvertePlateForme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Orientation")
                        .HasColumnType("int");

                    b.Property<bool?>("Oriente")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Public")
                        .HasColumnType("bit");

                    b.Property<int?>("Sexe")
                        .HasColumnType("int");

                    b.Property<int?>("SituationFamilial")
                        .HasColumnType("int");

                    b.Property<int?>("Statut")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Entities.ClientFinance", b =>
                {
                    b.Property<int>("ClientFinanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientFinanceID"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ApportPersonnelConfirme")
                        .HasColumnType("bit");

                    b.Property<string>("CIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAderation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<double>("MontantApportPersonnel")
                        .HasColumnType("float");

                    b.Property<double>("MontantINDH")
                        .HasColumnType("float");

                    b.Property<double>("MontantProjet")
                        .HasColumnType("float");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlateformeGestionnaire")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientFinanceID");

                    b.ToTable("ClientFinances");
                });

            modelBuilder.Entity("Domain.Entities.ClientPublic", b =>
                {
                    b.Property<int>("ClientPublicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientPublicID"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAderation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecouvertePlateForme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Oriente")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.Property<int>("SituationFamilial")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valide")
                        .HasColumnType("bit");

                    b.HasKey("ClientPublicID");

                    b.ToTable("ClientsPublic");
                });

            modelBuilder.Entity("Domain.Entities.Diplome", b =>
                {
                    b.Property<int>("DiplomeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiplomeID"));

                    b.Property<string>("Branche")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int?>("ClientPublicID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateObtentionDiplome")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiplomeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiplomeID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ClientPublicID");

                    b.ToTable("Diplomes");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int?>("ClientPublicID")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomFichier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ClientPublicID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Domain.Entities.DocumentINDH", b =>
                {
                    b.Property<int>("DocumentINDHID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentINDHID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomFichier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentINDHID");

                    b.HasIndex("ClientID");

                    b.ToTable("DocumentINDHS");
                });

            modelBuilder.Entity("Domain.Entities.EmailEnvoi", b =>
                {
                    b.Property<int>("EmailEnvoiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailEnvoiID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailEnvoiID");

                    b.ToTable("EmailEnvois");
                });

            modelBuilder.Entity("Domain.Entities.Financement", b =>
                {
                    b.Property<int>("FinancementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancementID"));

                    b.Property<string>("Beneficiaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Candidat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.Property<string>("NumeroCheque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeFinancement")
                        .HasColumnType("int");

                    b.HasKey("FinancementID");

                    b.ToTable("Financements");
                });

            modelBuilder.Entity("Domain.Entities.Fonctionnement", b =>
                {
                    b.Property<int>("FonctionnementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FonctionnementID"));

                    b.Property<string>("Beneficiaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChapitreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.Property<string>("NuméroCheque")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FonctionnementID");

                    b.HasIndex("ChapitreId");

                    b.ToTable("Fonctionnements");
                });

            modelBuilder.Entity("Domain.Entities.Formation", b =>
                {
                    b.Property<int>("FormationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormationID"));

                    b.Property<string>("Animateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFormation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DureeFormation")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormationID");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("Domain.Entities.INDH", b =>
                {
                    b.Property<int>("INDHID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("INDHID"));

                    b.Property<double>("ApportEnAmenagement")
                        .HasColumnType("float");

                    b.Property<double>("ApportEnDhs")
                        .HasColumnType("float");

                    b.Property<double>("Autre")
                        .HasColumnType("float");

                    b.Property<int?>("ClientFinanceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Etat")
                        .HasColumnType("int");

                    b.Property<string>("Materiel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<double>("MontantAcquisition")
                        .HasColumnType("float");

                    b.Property<double>("PartIndh")
                        .HasColumnType("float");

                    b.Property<int?>("PlateformeGestionnaire")
                        .HasColumnType("int");

                    b.HasKey("INDHID");

                    b.HasIndex("ClientFinanceID");

                    b.ToTable("INDHS");
                });

            modelBuilder.Entity("Domain.Entities.InscriptionFormation", b =>
                {
                    b.Property<int>("InscriptionFormationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InscriptionFormationID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("FormationID")
                        .HasColumnType("int");

                    b.HasKey("InscriptionFormationID");

                    b.HasIndex("ClientID");

                    b.HasIndex("FormationID");

                    b.ToTable("InscriptionFormation");
                });

            modelBuilder.Entity("KhalfiElection.Models.Entities.Personne", b =>
                {
                    b.Property<int>("PersonneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonneId"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsResponsable")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PivotId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelationParenteId")
                        .HasColumnType("int");

                    b.Property<int?>("SecteurId")
                        .HasColumnType("int");

                    b.HasKey("PersonneId");

                    b.HasIndex("PivotId");

                    b.HasIndex("RelationParenteId");

                    b.HasIndex("SecteurId");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("KhalfiElection.Models.Entities.Secteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Secteurs");
                });

            modelBuilder.Entity("KhalfiElection.Models.Entities.TypeRelationParente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesRelationParente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Diplome", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Diplomes")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ClientPublic", null)
                        .WithMany("Diplomes")
                        .HasForeignKey("ClientPublicID");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ClientPublic", null)
                        .WithMany("Documents")
                        .HasForeignKey("ClientPublicID");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.DocumentINDH", b =>
                {
                    b.HasOne("Domain.Entities.ClientFinance", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.Fonctionnement", b =>
                {
                    b.HasOne("Domain.Entities.Chapitre", "Chapitre")
                        .WithMany("Fonctionnements")
                        .HasForeignKey("ChapitreId");

                    b.Navigation("Chapitre");
                });

            modelBuilder.Entity("Domain.Entities.INDH", b =>
                {
                    b.HasOne("Domain.Entities.ClientFinance", "ClientFinance")
                        .WithMany("INDHS")
                        .HasForeignKey("ClientFinanceID");

                    b.Navigation("ClientFinance");
                });

            modelBuilder.Entity("Domain.Entities.InscriptionFormation", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("InscriptionFormation")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Formation", "Formation")
                        .WithMany("InscriptionFormation")
                        .HasForeignKey("FormationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("KhalfiElection.Models.Entities.Personne", b =>
                {
                    b.HasOne("KhalfiElection.Models.Entities.Personne", "Pivot")
                        .WithMany()
                        .HasForeignKey("PivotId");

                    b.HasOne("KhalfiElection.Models.Entities.TypeRelationParente", "RelationParente")
                        .WithMany()
                        .HasForeignKey("RelationParenteId");

                    b.HasOne("KhalfiElection.Models.Entities.Secteur", "Secteur")
                        .WithMany()
                        .HasForeignKey("SecteurId");

                    b.Navigation("Pivot");

                    b.Navigation("RelationParente");

                    b.Navigation("Secteur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Chapitre", b =>
                {
                    b.Navigation("Fonctionnements");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Diplomes");

                    b.Navigation("Documents");

                    b.Navigation("InscriptionFormation");
                });

            modelBuilder.Entity("Domain.Entities.ClientFinance", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("INDHS");
                });

            modelBuilder.Entity("Domain.Entities.ClientPublic", b =>
                {
                    b.Navigation("Diplomes");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Domain.Entities.Formation", b =>
                {
                    b.Navigation("InscriptionFormation");
                });
#pragma warning restore 612, 618
        }
    }
}
